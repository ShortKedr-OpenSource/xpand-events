<#@ template debug="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ include file="Includes/Operations.ttinclude"#>
<#@ include file="Includes/EventGenerationConfig.ttinclude"#>

namespace Xpand.Events { 

<#
    for (int i = 0; i <= EventMaxParamCount; i++) {
#>
    public class OrderedXEvent<#= BuildTemplateDefinitionParams(i) #> : BaseOrderedEvent<Event<#= BuildTemplateDefinitionParams(i) #>> {

        public void Invoke(<#= BuildTemplateMethodParams(i) #>){
            if (IsSuspended) return;
            PrepareInvoke();
            var subscriptions = GetImmutableSubscriptionArray();
            for (int i = 0; i < subscriptions.Length; i++) {
                subscriptions[i].Invoke(<#= BuildTemplateUseParams(i) #>);
            }
        }

    }

<#
    }
#>

}